{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.get = get;\nexports.getWithFallback_DEPRECATED = getWithFallback_DEPRECATED;\nexports.setRuntimeConfigProvider = setRuntimeConfigProvider;\nexports.unstable_hasStaticViewConfig = unstable_hasStaticViewConfig;\nvar StaticViewConfigValidator = _interopRequireWildcard(require(\"./StaticViewConfigValidator\"));\nvar _ViewConfig = require(\"./ViewConfig\");\nvar _UIManager = _interopRequireDefault(require(\"../ReactNative/UIManager\"));\nvar _ReactNativeViewConfigRegistry = _interopRequireDefault(require(\"../Renderer/shims/ReactNativeViewConfigRegistry\"));\nvar _getNativeComponentAttributes = _interopRequireDefault(require(\"../ReactNative/getNativeComponentAttributes\"));\nvar _verifyComponentAttributeEquivalence = _interopRequireDefault(require(\"../Utilities/verifyComponentAttributeEquivalence\"));\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar getRuntimeConfig;\nfunction setRuntimeConfigProvider(runtimeConfigProvider) {\n  (0, _invariant.default)(getRuntimeConfig == null, 'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.');\n  getRuntimeConfig = runtimeConfigProvider;\n}\nfunction get(name, viewConfigProvider) {\n  _ReactNativeViewConfigRegistry.default.register(name, function () {\n    var _getRuntimeConfig;\n    var _ref = (_getRuntimeConfig = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig : {\n        native: true,\n        strict: false,\n        verify: false\n      },\n      native = _ref.native,\n      strict = _ref.strict,\n      verify = _ref.verify;\n    var viewConfig = native ? (0, _getNativeComponentAttributes.default)(name) : (0, _ViewConfig.createViewConfig)(viewConfigProvider());\n    if (verify) {\n      var nativeViewConfig = native ? viewConfig : (0, _getNativeComponentAttributes.default)(name);\n      var staticViewConfig = native ? (0, _ViewConfig.createViewConfig)(viewConfigProvider()) : viewConfig;\n      if (strict) {\n        var validationOutput = StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);\n        if (validationOutput.type === 'invalid') {\n          console.error(StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));\n        }\n      } else {\n        (0, _verifyComponentAttributeEquivalence.default)(nativeViewConfig, staticViewConfig);\n      }\n    }\n    return viewConfig;\n  });\n  return name;\n}\nfunction getWithFallback_DEPRECATED(name, viewConfigProvider) {\n  if (getRuntimeConfig == null) {\n    if (hasNativeViewConfig(name)) {\n      return get(name, viewConfigProvider);\n    }\n  } else {\n    if (getRuntimeConfig(name) != null) {\n      return get(name, viewConfigProvider);\n    }\n  }\n  var FallbackNativeComponent = function FallbackNativeComponent(props) {\n    return null;\n  };\n  FallbackNativeComponent.displayName = \"Fallback(\" + name + \")\";\n  return FallbackNativeComponent;\n}\nfunction hasNativeViewConfig(name) {\n  (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');\n  return _UIManager.default.getViewManagerConfig(name) != null;\n}\nfunction unstable_hasStaticViewConfig(name) {\n  var _getRuntimeConfig2;\n  var _ref2 = (_getRuntimeConfig2 = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig2 : {\n      native: true\n    },\n    native = _ref2.native;\n  return !native;\n}","map":{"version":3,"names":["getRuntimeConfig","setRuntimeConfigProvider","runtimeConfigProvider","invariant","get","name","viewConfigProvider","ReactNativeViewConfigRegistry","register","native","strict","verify","viewConfig","getNativeComponentAttributes","createViewConfig","nativeViewConfig","staticViewConfig","validationOutput","StaticViewConfigValidator","validate","type","console","error","stringifyValidationResult","verifyComponentAttributeEquivalence","getWithFallback_DEPRECATED","hasNativeViewConfig","FallbackNativeComponent","props","displayName","UIManager","getViewManagerConfig","unstable_hasStaticViewConfig"],"sources":["C:/Users/World/Downloads/project/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as StaticViewConfigValidator from './StaticViewConfigValidator';\nimport {createViewConfig} from './ViewConfig';\nimport UIManager from '../ReactNative/UIManager';\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../Renderer/shims/ReactNativeTypes';\nimport ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\nimport verifyComponentAttributeEquivalence from '../Utilities/verifyComponentAttributeEquivalence';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nlet getRuntimeConfig;\n\n/**\n * Configures a function that is called to determine whether a given component\n * should be registered using reflection of the native component at runtime.\n *\n * The provider should return null if the native component is unavailable in\n * the current environment.\n */\nexport function setRuntimeConfigProvider(\n  runtimeConfigProvider: (name: string) => ?{\n    native: boolean,\n    strict: boolean,\n    verify: boolean,\n  },\n): void {\n  invariant(\n    getRuntimeConfig == null,\n    'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.',\n  );\n  getRuntimeConfig = runtimeConfigProvider;\n}\n\n/**\n * Gets a `NativeComponent` that can be rendered by React Native.\n *\n * The supplied `viewConfigProvider` may or may not be invoked and utilized,\n * depending on how `setRuntimeConfigProvider` is configured.\n */\nexport function get<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): HostComponent<Config> {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {native, strict, verify} = getRuntimeConfig?.(name) ?? {\n      native: true,\n      strict: false,\n      verify: false,\n    };\n\n    const viewConfig = native\n      ? getNativeComponentAttributes(name)\n      : createViewConfig(viewConfigProvider());\n\n    if (verify) {\n      const nativeViewConfig = native\n        ? viewConfig\n        : getNativeComponentAttributes(name);\n      const staticViewConfig = native\n        ? createViewConfig(viewConfigProvider())\n        : viewConfig;\n\n      if (strict) {\n        const validationOutput = StaticViewConfigValidator.validate(\n          name,\n          nativeViewConfig,\n          staticViewConfig,\n        );\n\n        if (validationOutput.type === 'invalid') {\n          console.error(\n            StaticViewConfigValidator.stringifyValidationResult(\n              name,\n              validationOutput,\n            ),\n          );\n        }\n      } else {\n        verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig);\n      }\n    }\n\n    return viewConfig;\n  });\n\n  // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!\n  return name;\n}\n\n/**\n * Same as `NativeComponentRegistry.get(...)`, except this will check either\n * the `setRuntimeConfigProvider` configuration or use native reflection (slow)\n * to determine whether this native component is available.\n *\n * If the native component is not available, a stub component is returned. Note\n * that the return value of this is not `HostComponent` because the returned\n * component instance is not guaranteed to have native methods.\n */\nexport function getWithFallback_DEPRECATED<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): React.AbstractComponent<Config> {\n  if (getRuntimeConfig == null) {\n    // `getRuntimeConfig == null` when static view configs are disabled\n    // If `setRuntimeConfigProvider` is not configured, use native reflection.\n    if (hasNativeViewConfig(name)) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  } else {\n    // If there is no runtime config, then the native component is unavailable.\n    if (getRuntimeConfig(name) != null) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  }\n\n  const FallbackNativeComponent = function (props: Config): React.Node {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name: string): boolean {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if there is a StaticViewConfig registered for the\n * component name received as a parameter.\n */\nexport function unstable_hasStaticViewConfig(name: string): boolean {\n  const {native} = getRuntimeConfig?.(name) ?? {\n    native: true,\n  };\n  return !native;\n}\n"],"mappings":";;;;;;;;AAUA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAA+B;AAAA;AAE/B,IAAIA,gBAAgB;AASb,SAASC,wBAAwB,CACtCC,qBAIC,EACK;EACN,IAAAC,kBAAS,EACPH,gBAAgB,IAAI,IAAI,EACxB,2EAA2E,CAC5E;EACDA,gBAAgB,GAAGE,qBAAqB;AAC1C;AAQO,SAASE,GAAG,CACjBC,IAAY,EACZC,kBAA2C,EACpB;EACvBC,sCAA6B,CAACC,QAAQ,CAACH,IAAI,EAAE,YAAM;IAAA;IACjD,gCAAiCL,gBAAgB,oBAAhBA,gBAAgB,CAAGK,IAAI,CAAC,gCAAI;QAC3DI,MAAM,EAAE,IAAI;QACZC,MAAM,EAAE,KAAK;QACbC,MAAM,EAAE;MACV,CAAC;MAJMF,MAAM,QAANA,MAAM;MAAEC,MAAM,QAANA,MAAM;MAAEC,MAAM,QAANA,MAAM;IAM7B,IAAMC,UAAU,GAAGH,MAAM,GACrB,IAAAI,qCAA4B,EAACR,IAAI,CAAC,GAClC,IAAAS,4BAAgB,EAACR,kBAAkB,EAAE,CAAC;IAE1C,IAAIK,MAAM,EAAE;MACV,IAAMI,gBAAgB,GAAGN,MAAM,GAC3BG,UAAU,GACV,IAAAC,qCAA4B,EAACR,IAAI,CAAC;MACtC,IAAMW,gBAAgB,GAAGP,MAAM,GAC3B,IAAAK,4BAAgB,EAACR,kBAAkB,EAAE,CAAC,GACtCM,UAAU;MAEd,IAAIF,MAAM,EAAE;QACV,IAAMO,gBAAgB,GAAGC,yBAAyB,CAACC,QAAQ,CACzDd,IAAI,EACJU,gBAAgB,EAChBC,gBAAgB,CACjB;QAED,IAAIC,gBAAgB,CAACG,IAAI,KAAK,SAAS,EAAE;UACvCC,OAAO,CAACC,KAAK,CACXJ,yBAAyB,CAACK,yBAAyB,CACjDlB,IAAI,EACJY,gBAAgB,CACjB,CACF;QACH;MACF,CAAC,MAAM;QACL,IAAAO,4CAAmC,EAACT,gBAAgB,EAAEC,gBAAgB,CAAC;MACzE;IACF;IAEA,OAAOJ,UAAU;EACnB,CAAC,CAAC;EAGF,OAAOP,IAAI;AACb;AAWO,SAASoB,0BAA0B,CACxCpB,IAAY,EACZC,kBAA2C,EACV;EACjC,IAAIN,gBAAgB,IAAI,IAAI,EAAE;IAG5B,IAAI0B,mBAAmB,CAACrB,IAAI,CAAC,EAAE;MAC7B,OAAOD,GAAG,CAASC,IAAI,EAAEC,kBAAkB,CAAC;IAC9C;EACF,CAAC,MAAM;IAEL,IAAIN,gBAAgB,CAACK,IAAI,CAAC,IAAI,IAAI,EAAE;MAClC,OAAOD,GAAG,CAASC,IAAI,EAAEC,kBAAkB,CAAC;IAC9C;EACF;EAEA,IAAMqB,uBAAuB,GAAG,SAA1BA,uBAAuB,CAAaC,KAAa,EAAc;IACnE,OAAO,IAAI;EACb,CAAC;EACDD,uBAAuB,CAACE,WAAW,iBAAexB,IAAI,MAAG;EACzD,OAAOsB,uBAAuB;AAChC;AAEA,SAASD,mBAAmB,CAACrB,IAAY,EAAW;EAClD,IAAAF,kBAAS,EAACH,gBAAgB,IAAI,IAAI,EAAE,wBAAwB,CAAC;EAC7D,OAAO8B,kBAAS,CAACC,oBAAoB,CAAC1B,IAAI,CAAC,IAAI,IAAI;AACrD;AAQO,SAAS2B,4BAA4B,CAAC3B,IAAY,EAAW;EAAA;EAClE,kCAAiBL,gBAAgB,oBAAhBA,gBAAgB,CAAGK,IAAI,CAAC,iCAAI;MAC3CI,MAAM,EAAE;IACV,CAAC;IAFMA,MAAM,SAANA,MAAM;EAGb,OAAO,CAACA,MAAM;AAChB"},"metadata":{},"sourceType":"script"}