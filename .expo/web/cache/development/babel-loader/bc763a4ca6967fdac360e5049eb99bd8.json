{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeMaps = _interopRequireWildcard(require(\"react-native-maps\"));\nvar _reactNativeMapsDirections = _interopRequireDefault(require(\"react-native-maps-directions\"));\nvar _constants = require(\"../constants\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\World\\\\Downloads\\\\project\\\\screens\\\\OrderDelivery.js\";\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar OrderDelivery = function OrderDelivery(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  return (0, _jsxRuntime.jsx)(_reactNative.View, {\n    style: {\n      flex: 1\n    }\n  });\n};\nvar _default = OrderDelivery;\nexports.default = _default;","map":{"version":3,"names":["OrderDelivery","route","navigation","flex"],"sources":["C:/Users/World/Downloads/project/screens/OrderDelivery.js"],"sourcesContent":["import React from \"react\";\nimport { View, Text, Image, TouchableOpacity } from \"react-native\";\nimport MapView, { PROVIDER_GOOGLE, Marker } from \"react-native-maps\";\nimport MapViewDirections from \"react-native-maps-directions\";\n\nimport { COLORS, FONTS, icons, SIZES, GOOGLE_API_KEY } from \"../constants\";\n\nconst OrderDelivery = ({ route, navigation }) => {\n  // const mapView = React.useRef()\n\n  // const [restaurant, setRestaurant] = React.useState(null)\n  // const [streetName, setStreetName] = React.useState(\"\")\n  // const [fromLocation, setFromLocation] = React.useState(null)\n  // const [toLocation, setToLocation] = React.useState(null)\n  // const [region, setRegion] = React.useState(null)\n\n  // const [duration, setDuration] = React.useState(0)\n  // const [isReady, setIsReady] = React.useState(false)\n  // const [angle, setAngle] = React.useState(0)\n\n  // React.useEffect(() => {\n  //     let { restaurant, currentLocation } = route.params;\n\n  //     let fromLoc = currentLocation.gps\n  //     let toLoc = restaurant.location\n  //     let street = currentLocation.streetName\n\n  //     let mapRegion = {\n  //         latitude: (fromLoc.latitude + toLoc.latitude) / 2,\n  //         longitude: (fromLoc.longitude + toLoc.longitude) / 2,\n  //         latitudeDelta: Math.abs(fromLoc.latitude - toLoc.latitude) * 2,\n  //         longitudeDelta: Math.abs(fromLoc.longitude - toLoc.longitude) * 2\n  //     }\n\n  //     setRestaurant(restaurant)\n  //     setStreetName(street)\n  //     setFromLocation(fromLoc)\n  //     setToLocation(toLoc)\n  //     setRegion(mapRegion)\n\n  // }, [])\n\n  // function calculateAngle(coordinates) {\n  //     let startLat = coordinates[0][\"latitude\"]\n  //     let startLng = coordinates[0][\"longitude\"]\n  //     let endLat = coordinates[1][\"latitude\"]\n  //     let endLng = coordinates[1][\"longitude\"]\n  //     let dx = endLat - startLat\n  //     let dy = endLng - startLng\n\n  //     return Math.atan2(dy, dx) * 180 / Math.PI\n  // }\n\n  // function zoomIn() {\n  //     let newRegion = {\n  //         latitude: region.latitude,\n  //         longitude: region.longitude,\n  //         latitudeDelta: region.latitudeDelta / 2,\n  //         longitudeDelta: region.longitudeDelta / 2\n  //     }\n\n  //     setRegion(newRegion)\n  //     mapView.current.animateToRegion(newRegion, 200)\n  // }\n\n  // function zoomOut() {\n  //     let newRegion = {\n  //         latitude: region.latitude,\n  //         longitude: region.longitude,\n  //         latitudeDelta: region.latitudeDelta * 2,\n  //         longitudeDelta: region.longitudeDelta * 2\n  //     }\n\n  //     setRegion(newRegion)\n  //     mapView.current.animateToRegion(newRegion, 200)\n  // }\n\n  // function renderMap() {\n  //     const destinationMarker = () => (\n  //         <Marker\n  //             coordinate={toLocation}\n  //         >\n  //             <View\n  //                 style={{\n  //                     height: 40,\n  //                     width: 40,\n  //                     borderRadius: 20,\n  //                     alignItems: 'center',\n  //                     justifyContent: 'center',\n  //                     backgroundColor: COLORS.white\n  //                 }}\n  //             >\n  //                 <View\n  //                     style={{\n  //                         height: 30,\n  //                         width: 30,\n  //                         borderRadius: 15,\n  //                         alignItems: 'center',\n  //                         justifyContent: 'center',\n  //                         backgroundColor: COLORS.primary\n  //                     }}\n  //                 >\n  //                     <Image\n  //                         source={icons.pin}\n  //                         style={{\n  //                             width: 25,\n  //                             height: 25,\n  //                             tintColor: COLORS.white\n  //                         }}\n  //                     />\n  //                 </View>\n  //             </View>\n  //         </Marker>\n  //     )\n\n  //     const carIcon = () => (\n  //         <Marker\n  //             coordinate={fromLocation}\n  //             anchor={{ x: 0.5, y: 0.5 }}\n  //             flat={true}\n  //             rotation={angle}\n  //         >\n  //             <Image\n  //                 source={icons.car}\n  //                 style={{\n  //                     width: 40,\n  //                     height: 40\n  //                 }}\n  //             />\n  //         </Marker>\n  //     )\n\n  //     return (\n  //         <View style={{ flex: 1 }}>\n  //             <MapView\n  //                 ref={mapView}\n  //                 provider={PROVIDER_GOOGLE}\n  //                 initialRegion={region}\n  //                 style={{ flex: 1 }}\n  //             >\n  //                 <MapViewDirections\n  //                     origin={fromLocation}\n  //                     destination={toLocation}\n  //                     apikey={GOOGLE_API_KEY}\n  //                     strokeWidth={5}\n  //                     strokeColor={COLORS.primary}\n  //                     optimizeWaypoints={true}\n  //                     onReady={result => {\n  //                         setDuration(result.duration)\n\n  //                         if (!isReady) {\n  //                             // Fit route into maps\n  //                             mapView.current.fitToCoordinates(result.coordinates, {\n  //                                 edgePadding: {\n  //                                     right: (SIZES.width / 20),\n  //                                     bottom: (SIZES.height / 4),\n  //                                     left: (SIZES.width / 20),\n  //                                     top: (SIZES.height / 8)\n  //                                 }\n  //                             })\n\n  //                             // Reposition the car\n  //                             let nextLoc = {\n  //                                 latitude: result.coordinates[0][\"latitude\"],\n  //                                 longitude: result.coordinates[0][\"longitude\"]\n  //                             }\n\n  //                             if (result.coordinates.length >= 2) {\n  //                                 let angle = calculateAngle(result.coordinates)\n  //                                 setAngle(angle)\n  //                             }\n\n  //                             setFromLocation(nextLoc)\n  //                             setIsReady(true)\n  //                         }\n  //                     }}\n  //                 />\n  //                 {destinationMarker()}\n  //                 {carIcon()}\n  //             </MapView>\n  //         </View>\n  //     )\n  // }\n\n  // function renderDestinationHeader() {\n  //     return (\n  //         <View\n  //             style={{\n  //                 position: 'absolute',\n  //                 top: 50,\n  //                 left: 0,\n  //                 right: 0,\n  //                 height: 50,\n  //                 alignItems: 'center',\n  //                 justifyContent: 'center'\n  //             }}\n  //         >\n  //             <View\n  //                 style={{\n  //                     flexDirection: 'row',\n  //                     alignItems: 'center',\n  //                     width: SIZES.width * 0.9,\n  //                     paddingVertical: SIZES.padding,\n  //                     paddingHorizontal: SIZES.padding * 2,\n  //                     borderRadius: SIZES.radius,\n  //                     backgroundColor: COLORS.white\n  //                 }}\n  //             >\n  //                 <Image\n  //                     source={icons.red_pin}\n  //                     style={{\n  //                         width: 30,\n  //                         height: 30,\n  //                         marginRight: SIZES.padding\n  //                     }}\n  //                 />\n\n  //                 <View style={{ flex: 1 }}>\n  //                     <Text style={{ ...FONTS.body3 }}>{streetName}</Text>\n  //                 </View>\n\n  //                 <Text style={{ ...FONTS.body3 }}>{Math.ceil(duration)} mins</Text>\n  //             </View>\n  //         </View>\n  //     )\n  // }\n\n  // function renderDeliveryInfo() {\n  //     return (\n  //         <View\n  //             style={{\n  //                 position: 'absolute',\n  //                 bottom: 50,\n  //                 left: 0,\n  //                 right: 0,\n  //                 alignItems: 'center',\n  //                 justifyContent: 'center'\n  //             }}\n  //         >\n  //             <View\n  //                 style={{\n  //                     width: SIZES.width * 0.9,\n  //                     paddingVertical: SIZES.padding * 3,\n  //                     paddingHorizontal: SIZES.padding * 2,\n  //                     borderRadius: SIZES.radius,\n  //                     backgroundColor: COLORS.white\n  //                 }}\n  //             >\n  //                 <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n  //                     {/* Avatar */}\n  //                     <Image\n  //                         source={restaurant?.courier.avatar}\n  //                         style={{\n  //                             width: 50,\n  //                             height: 50,\n  //                             borderRadius: 25\n  //                         }}\n  //                     />\n\n  //                     <View style={{ flex: 1, marginLeft: SIZES.padding }}>\n  //                         {/* Name & Rating */}\n  //                         <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>\n  //                             <Text style={{ ...FONTS.h4 }}>{restaurant?.courier.name}</Text>\n  //                             <View style={{ flexDirection: 'row' }}>\n  //                                 <Image\n  //                                     source={icons.star}\n  //                                     style={{ width: 18, height: 18, tintColor: COLORS.primary, marginRight: SIZES.padding }}\n  //                                 />\n  //                                 <Text style={{ ...FONTS.body3 }}>{restaurant?.rating}</Text>\n  //                             </View>\n  //                         </View>\n\n  //                         {/* Restaurant */}\n  //                         <Text style={{ color: COLORS.darkgray, ...FONTS.body4 }}>{restaurant?.name}</Text>\n  //                     </View>\n  //                 </View>\n\n  //                 {/* Buttons */}\n  //                 <View\n  //                     style={{\n  //                         flexDirection: 'row',\n  //                         marginTop: SIZES.padding * 2,\n  //                         justifyContent: 'space-between'\n  //                     }}\n  //                 >\n  //                     <TouchableOpacity\n  //                         style={{\n  //                             flex: 1,\n  //                             height: 50,\n  //                             marginRight: 10,\n  //                             backgroundColor: COLORS.primary,\n  //                             alignItems: 'center',\n  //                             justifyContent: 'center',\n  //                             borderRadius: 10\n  //                         }}\n  //                         onPress={() => navigation.navigate(\"Home\")}\n  //                     >\n  //                         <Text style={{ ...FONTS.h4, color: COLORS.white }}>Call</Text>\n  //                     </TouchableOpacity>\n\n  //                     <TouchableOpacity\n  //                         style={{\n  //                             flex: 1,\n  //                             height: 50,\n  //                             backgroundColor: COLORS.secondary,\n  //                             alignItems: 'center',\n  //                             justifyContent: 'center',\n  //                             borderRadius: 10\n  //                         }}\n  //                         onPress={() => navigation.goBack()}\n  //                     >\n  //                         <Text style={{ ...FONTS.h4, color: COLORS.white }}>Cancel</Text>\n  //                     </TouchableOpacity>\n  //                 </View>\n\n  //             </View>\n  //         </View>\n  //     )\n  // }\n\n  // function renderButtons() {\n  //     return (\n  //         <View\n  //             style={{\n  //                 position: 'absolute',\n  //                 bottom: SIZES.height * 0.35,\n  //                 right: SIZES.padding * 2,\n  //                 width: 60,\n  //                 height: 130,\n  //                 justifyContent: 'space-between'\n  //             }}\n  //         >\n  //             {/* Zoom In */}\n  //             <TouchableOpacity\n  //                 style={{\n  //                     width: 60,\n  //                     height: 60,\n  //                     borderRadius: 30,\n  //                     backgroundColor: COLORS.white,\n  //                     alignItems: 'center',\n  //                     justifyContent: 'center'\n  //                 }}\n  //                 onPress={() => zoomIn()}\n  //             >\n  //                 <Text style={{ ...FONTS.body1 }}>+</Text>\n  //             </TouchableOpacity>\n\n  //             {/* Zoom Out */}\n  //             <TouchableOpacity\n  //                 style={{\n  //                     width: 60,\n  //                     height: 60,\n  //                     borderRadius: 30,\n  //                     backgroundColor: COLORS.white,\n  //                     alignItems: 'center',\n  //                     justifyContent: 'center'\n  //                 }}\n  //                 onPress={() => zoomOut()}\n  //             >\n  //                 <Text style={{ ...FONTS.body1 }}>-</Text>\n  //             </TouchableOpacity>\n  //         </View>\n\n  //     )\n  // }\n\n  return (\n    <View style={{ flex: 1 }}>\n      {/* {renderMap()}\n            {renderDestinationHeader()}\n            {renderDeliveryInfo()}\n            {renderButtons()} */}\n    </View>\n  );\n};\n\nexport default OrderDelivery;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AAA2E;AAAA;EAAA;AAAA;AAAA;AAE3E,IAAMA,aAAa,GAAG,SAAhBA,aAAa,OAA8B;EAAA,IAAxBC,KAAK,QAALA,KAAK;IAAEC,UAAU,QAAVA,UAAU;EAuWxC,OACE,qBAAC,iBAAI;IAAC,KAAK,EAAE;MAAEC,IAAI,EAAE;IAAE;EAAE,EAKlB;AAEX,CAAC;AAAC,eAEaH,aAAa;AAAA"},"metadata":{},"sourceType":"script"}